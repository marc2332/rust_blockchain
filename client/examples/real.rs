use blockchain::{
    TransactionBuilder,
    Wallet,
};
use client::RPCClient;

#[tokio::main]
async fn main() {
    // Connect to the node's RPC server
    let client = RPCClient::new("http://localhost:3030").await.unwrap();

    // Sender wallet: This wallet should be created from the private key
    let wallet_a = Wallet::from_private(
        vec![
            45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89,
            45, 45, 45, 45, 45, 10, 77, 73, 73, 67, 101, 65, 73, 66, 65, 68, 65, 78, 66, 103, 107,
            113, 104, 107, 105, 71, 57, 119, 48, 66, 65, 81, 69, 70, 65, 65, 83, 67, 65, 109, 73,
            119, 103, 103, 74, 101, 65, 103, 69, 65, 65, 111, 71, 66, 65, 80, 69, 56, 70, 90, 116,
            51, 71, 119, 88, 87, 69, 90, 56, 51, 10, 90, 122, 102, 71, 76, 104, 49, 75, 43, 75, 98,
            98, 104, 65, 47, 75, 79, 117, 54, 101, 69, 67, 57, 65, 78, 75, 54, 115, 54, 117, 114,
            120, 48, 70, 115, 73, 116, 99, 102, 55, 114, 74, 67, 88, 78, 48, 121, 82, 87, 77, 51,
            83, 57, 118, 81, 82, 76, 54, 80, 121, 75, 103, 53, 69, 10, 70, 108, 57, 65, 81, 112,
            121, 122, 120, 72, 116, 88, 57, 48, 47, 75, 77, 85, 113, 90, 108, 67, 108, 105, 119,
            89, 102, 113, 80, 108, 108, 111, 103, 116, 118, 55, 113, 76, 89, 88, 85, 65, 47, 111,
            67, 85, 70, 120, 89, 49, 75, 87, 72, 73, 82, 104, 111, 111, 43, 107, 73, 71, 72, 86,
            10, 116, 106, 50, 110, 106, 119, 65, 53, 99, 76, 55, 53, 82, 53, 117, 81, 89, 111, 70,
            116, 108, 82, 89, 65, 112, 103, 52, 47, 65, 103, 77, 66, 65, 65, 69, 67, 103, 89, 69,
            65, 117, 88, 51, 67, 43, 53, 84, 57, 69, 87, 76, 71, 107, 65, 47, 81, 55, 87, 69, 85,
            54, 109, 57, 81, 10, 102, 84, 85, 68, 43, 103, 81, 57, 104, 109, 102, 66, 43, 67, 77,
            57, 110, 121, 98, 86, 83, 67, 48, 67, 85, 107, 50, 68, 81, 97, 47, 121, 120, 65, 101,
            83, 102, 79, 121, 121, 82, 83, 109, 51, 118, 72, 112, 79, 107, 74, 106, 80, 51, 56, 74,
            90, 70, 89, 114, 97, 55, 66, 100, 79, 10, 53, 67, 102, 116, 54, 75, 65, 83, 68, 110,
            71, 104, 55, 99, 111, 86, 52, 72, 114, 71, 118, 68, 120, 65, 115, 85, 66, 65, 86, 98,
            101, 104, 122, 72, 87, 99, 115, 56, 107, 86, 54, 78, 108, 117, 55, 97, 65, 112, 53,
            117, 115, 113, 57, 69, 99, 67, 90, 86, 68, 113, 77, 51, 109, 103, 10, 69, 113, 80, 119,
            67, 90, 71, 99, 100, 69, 102, 82, 98, 75, 112, 112, 48, 69, 69, 67, 81, 81, 68, 56, 43,
            77, 43, 114, 76, 118, 116, 87, 88, 98, 53, 121, 104, 88, 56, 72, 120, 48, 66, 106, 100,
            47, 75, 51, 70, 106, 75, 84, 48, 84, 106, 56, 67, 54, 70, 53, 67, 118, 103, 110, 10,
            74, 54, 120, 85, 108, 116, 66, 54, 90, 107, 102, 51, 118, 87, 55, 66, 65, 115, 79, 118,
            89, 80, 70, 109, 114, 100, 121, 74, 74, 66, 116, 99, 120, 80, 117, 66, 75, 101, 68, 85,
            99, 112, 115, 102, 65, 107, 69, 65, 57, 66, 57, 79, 101, 77, 99, 77, 65, 88, 77, 47,
            80, 101, 117, 52, 10, 43, 120, 102, 80, 52, 122, 73, 86, 86, 102, 97, 87, 107, 118,
            102, 48, 111, 87, 51, 113, 76, 112, 101, 112, 97, 84, 117, 118, 99, 97, 49, 112, 48,
            102, 80, 79, 113, 83, 70, 43, 52, 110, 83, 115, 121, 102, 86, 48, 75, 112, 43, 87, 79,
            49, 112, 120, 117, 118, 81, 81, 68, 74, 117, 77, 10, 70, 86, 86, 73, 52, 81, 74, 66,
            65, 75, 98, 88, 70, 109, 101, 112, 77, 98, 121, 82, 85, 83, 84, 73, 112, 76, 73, 108,
            109, 72, 76, 66, 122, 107, 77, 119, 69, 97, 86, 112, 122, 76, 74, 50, 110, 85, 86, 117,
            108, 97, 71, 70, 83, 101, 80, 48, 72, 52, 86, 75, 90, 100, 97, 102, 10, 105, 105, 99,
            106, 119, 112, 109, 116, 84, 121, 106, 81, 75, 43, 52, 75, 56, 84, 122, 113, 56, 90,
            69, 76, 90, 75, 118, 89, 57, 106, 77, 67, 81, 81, 67, 121, 74, 107, 54, 76, 48, 83, 89,
            118, 119, 76, 121, 56, 73, 86, 79, 105, 50, 97, 79, 53, 57, 119, 105, 101, 55, 81, 55,
            66, 10, 80, 102, 88, 109, 65, 71, 74, 80, 107, 104, 110, 116, 85, 56, 77, 97, 119, 67,
            82, 106, 78, 80, 114, 120, 98, 105, 73, 56, 102, 69, 122, 69, 76, 84, 50, 84, 66, 86,
            99, 76, 66, 86, 118, 78, 120, 79, 73, 90, 99, 85, 72, 118, 74, 52, 102, 66, 65, 107,
            65, 82, 57, 113, 76, 103, 10, 104, 68, 56, 115, 109, 76, 122, 101, 57, 99, 111, 82,
            115, 84, 71, 67, 70, 70, 82, 66, 114, 43, 116, 73, 81, 101, 115, 49, 68, 90, 65, 84,
            65, 106, 104, 43, 69, 69, 50, 77, 76, 99, 99, 115, 79, 120, 107, 87, 105, 77, 71, 120,
            74, 115, 87, 68, 43, 100, 85, 53, 53, 116, 112, 105, 10, 101, 122, 77, 97, 116, 75,
            107, 72, 121, 116, 88, 85, 89, 52, 71, 50, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 80,
            82, 73, 86, 65, 84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 10,
        ]
        .as_slice(),
    );
    // Receiver wallet
    let wallet_b = Wallet::new();

    // Build the transaction
    let sample_tx = TransactionBuilder::new()
        .key(&wallet_a.get_public())
        .from_address(&wallet_a.get_public().hash_it())
        .to_address(&wallet_b.get_public().hash_it())
        .ammount(1)
        .hash_it()
        .sign_with(&wallet_a)
        .build();

    // Send the transaction to a known node
    let res = client.add_transaction(sample_tx).await;

    println!("{:?}", res.unwrap());
}
